<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\KEIL_TMPM475SBK.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\KEIL_TMPM475SBK.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri May 22 16:15:29 2020
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; main_loop &rArr; user_control &rArr; user_setting &rArr; Get_Target_Speed &rArr; Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[73]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[d]">INT0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[e]">INT1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[f]">INT2_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[10]">INT3_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[11]">INT4_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[12]">INT5_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[33]">INT6_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[34]">INT7_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[47]">INT8_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[48]">INT9_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[37]">INTADACPA_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[39]">INTADACPB_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[1d]">INTADAPDA_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[1f]">INTADAPDB_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[43]">INTADASFT_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[45]">INTADATMR_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[38]">INTADBCPA_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[3a]">INTADBCPB_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[1e]">INTADBPDA_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[20]">INTADBPDB_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[44]">INTADBSFT_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[46]">INTADBTMR_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[49]">INTA_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[4a]">INTB_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[60]">INTCANGB_IRQHandler</a> from tmpm475_can_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[5e]">INTCANRX_IRQHandler</a> from tmpm475_can_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[5f]">INTCANTX_IRQHandler</a> from tmpm475_can_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[2b]">INTCAP00_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[2c]">INTCAP01_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[2d]">INTCAP10_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[2e]">INTCAP11_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[3f]">INTCAP20_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[40]">INTCAP21_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[41]">INTCAP30_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[42]">INTCAP31_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[2f]">INTCAP40_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[30]">INTCAP41_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[31]">INTCAP50_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[32]">INTCAP51_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[53]">INTCAP60_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[54]">INTCAP61_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[55]">INTCAP70_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[56]">INTCAP71_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[65]">INTCAP80_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[66]">INTCAP81_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[67]">INTCAP90_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[68]">INTCAP91_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[57]">INTC_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[6a]">INTDMACAERR_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[69]">INTDMACATC_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[58]">INTD_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[19]">INTEMG0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[1a]">INTEMG1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[4b]">INTENC00_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[4c]">INTENC01_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[6b]">INTENC10_IRQHandler</a> from nguyen_encoder.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[6c]">INTENC11_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[59]">INTE_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[5a]">INTF_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[1b]">INTOVV0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[1c]">INTOVV1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[29]">INTPMD0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[2a]">INTPMD1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[13]">INTRX0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[15]">INTRX1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[35]">INTRX2_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[4d]">INTRX3_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[5d]">INTSBI0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[21]">INTTB00_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[22]">INTTB01_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[23]">INTTB10_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[24]">INTTB11_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[3b]">INTTB20_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[3c]">INTTB21_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[3d]">INTTB30_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[3e]">INTTB31_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[25]">INTTB40_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[26]">INTTB41_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[27]">INTTB50_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[28]">INTTB51_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[4f]">INTTB60_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[50]">INTTB61_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[51]">INTTB70_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[52]">INTTB71_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[61]">INTTB80_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[62]">INTTB81_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[63]">INTTB90_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[64]">INTTB91_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[14]">INTTX0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[16]">INTTX1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[36]">INTTX2_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[4e]">INTTX3_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[17]">INTVCN0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[18]">INTVCN1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[5b]">INTVCT0_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[5c]">INTVCT1_IRQHandler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[71]">Reset_Handler</a> from startup_tmpm475.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_tmpm475.o(.text) referenced from startup_tmpm475.o(.text)
 <LI><a href="#[8]">UsageFault_Handler</a> from system_int.o(.text) referenced from startup_tmpm475.o(RESET)
 <LI><a href="#[72]">__main</a> from __main.o(!!!main) referenced from startup_tmpm475.o(.text)
 <LI><a href="#[70]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6f]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[76]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[77]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[14f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[78]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[149]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[150]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[81]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[151]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[152]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[153]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[154]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[155]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[156]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[157]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[158]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[159]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[160]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[161]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[162]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[163]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[164]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[86]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[166]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[16a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[16b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[75]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[16c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[80]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[82]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; main_loop &rArr; user_control &rArr; user_setting &rArr; Get_Target_Speed &rArr; Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[14c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[85]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[87]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[da]"></a>B_Motor_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, b_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>B_User_MotorControl</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, b_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = B_User_MotorControl &rArr; PMD_ReleaseEMG_Protection
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMD_ReleaseEMG_Protection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMD_GetEMG_Status
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Motor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[8d]"></a>C_Control_Ref_Model</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = C_Control_Ref_Model &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Uart_Ready_To_Send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[92]"></a>C_Common</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = C_Common &rArr; Cal_Vdq &rArr; E_Sqrt &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Vdq
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[d2]"></a>C_Stage_Stop</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_Stage_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[d3]"></a>C_Stage_Emergency</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_Stage_Emergency
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[d4]"></a>C_Stage_Bootstrap</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, c_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[d5]"></a>C_Stage_Initposition</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = C_Stage_Initposition
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[94]"></a>C_Stage_Force</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = C_Stage_Force
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_command_limit_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[96]"></a>C_Stage_Change_up</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C_Stage_Change_up &rArr; E_Sine
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E_Sine
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E_Cosine
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_command_limit_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[99]"></a>C_Stage_Steady_A</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, c_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = C_Stage_Steady_A
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_command_limit_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[93]"></a>Cal_Vdq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, calc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cal_Vdq &rArr; E_Sqrt &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E_Sqrt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sadd32
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muljc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Common
</UL>

<P><STRONG><a name="[c2]"></a>D_Detect_Rotor_Position</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, d_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = D_Detect_Rotor_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[c3]"></a>D_Control_Speed</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, d_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = D_Control_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[9e]"></a>D_SetZeroCurrent</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, d_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = D_SetZeroCurrent &rArr; VE_GetCurrentAdcData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetZeroCurrentData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_GetCurrentAdcData
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[c1]"></a>D_Check_OverCurrent</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, d_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[a4]"></a>init_Dac</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, dac_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_Dac &rArr; DacLocalWriteInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIO_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLocalWriteInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>DacWriteContinue</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dac_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DacWriteContinue
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTTX1_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacWriteStart
</UL>

<P><STRONG><a name="[a7]"></a>DacWriteStart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dac_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DacWriteStart &rArr; DacWriteContinue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacWriteContinue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiOutDataStart
</UL>

<P><STRONG><a name="[98]"></a>E_Sine</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, e_sub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = E_Sine
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E_Cosine
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Change_up
</UL>

<P><STRONG><a name="[97]"></a>E_Cosine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, e_sub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = E_Cosine &rArr; E_Sine
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E_Sine
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Change_up
</UL>

<P><STRONG><a name="[a9]"></a>init_Timer_interval4kH</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, initial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_Timer_interval4kH
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRB_SetRunState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRB_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRB_Enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>init_ENCen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, initial.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>init_ADCen</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, initial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_ADCen &rArr; IP_ADC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ADC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>init_PMDen</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, initial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_PMDen &rArr; IP_PMD_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_PMD_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>init_VEen</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, initial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_VEen &rArr; IP_VE_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_VE_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>init_WDT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, initial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_WriteClearCode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Enable
</UL>

<P><STRONG><a name="[ba]"></a>init_UART</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, initial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DefaultConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteDataBit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutputEnableReg
</UL>

<P><STRONG><a name="[e0]"></a>INT_interval_4kHz</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTTB00_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>INTVCN1</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = INTVCN1 &rArr; UiOutDataStart &rArr; DacWriteStart &rArr; DacWriteContinue
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Steady_A
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Initposition_v
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Initposition_i
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Force_v
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Force_i
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Emergency
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Change_up
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetdataToVEreg_Bootstrap
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_SetModulType
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_GetdataFromVEreg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VE_GetPhaseCurrent
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiOutDataStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Check_OverCurrent
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Control_Speed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Detect_Rotor_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>INTVCN0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>main_loop</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = main_loop &rArr; user_control &rArr; user_setting &rArr; Get_Target_Speed &rArr; Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_control
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Processing
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_WriteClearCode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_SetZeroCurrent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Steady_A
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Change_up
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Force
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Initposition
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Bootstrap
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Emergency
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Common
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Control_Ref_Model
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_User_MotorControl
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = main &rArr; main_loop &rArr; user_control &rArr; user_setting &rArr; Get_Target_Speed &rArr; Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_control
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_WriteClearCode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VEen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PMDen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADCen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Timer_interval4kH
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Dac
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_Motor_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8a]"></a>PMD_GetEMG_Status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMD_ReleaseEMG_Protection
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_User_MotorControl
</UL>

<P><STRONG><a name="[8c]"></a>PMD_ReleaseEMG_Protection</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PMD_ReleaseEMG_Protection
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMD_GetEMG_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_User_MotorControl
</UL>

<P><STRONG><a name="[cf]"></a>VE_Start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[c0]"></a>VE_GetPhaseCurrent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VE_GetPhaseCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[9f]"></a>VE_GetCurrentAdcData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VE_GetCurrentAdcData
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_SetZeroCurrent
</UL>

<P><STRONG><a name="[bf]"></a>VE_GetdataFromVEreg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[c5]"></a>VE_SetdataToVEreg_Stop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[c6]"></a>VE_SetdataToVEreg_Bootstrap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[c7]"></a>VE_SetdataToVEreg_Initposition_i</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[c8]"></a>VE_SetdataToVEreg_Initposition_v</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[c9]"></a>VE_SetdataToVEreg_Force_i</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[ca]"></a>VE_SetdataToVEreg_Force_v</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[cb]"></a>VE_SetdataToVEreg_Change_up</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[cc]"></a>VE_SetdataToVEreg_Steady_A</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[cd]"></a>VE_SetdataToVEreg_Emergency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[a0]"></a>VE_SetZeroCurrentData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_SetZeroCurrent
</UL>

<P><STRONG><a name="[172]"></a>VE_SetVDCreg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>VE_SetModulType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[b3]"></a>IP_PMD_init</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IP_PMD_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PMDen
</UL>

<P><STRONG><a name="[b5]"></a>IP_VE_init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IP_VE_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VEen
</UL>

<P><STRONG><a name="[b1]"></a>IP_ADC_init</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, mcuip_drv_ave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IP_ADC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetClk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADCen
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>INT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>INT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>INT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>INT5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>INTRX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTRX0_IRQHandler &rArr; Uart0_Receive_Interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Receive_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>INTTX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTTX0_IRQHandler &rArr; Uart0_Transmit_Interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Transmit_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>INTRX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>INTTX1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = INTTX1_IRQHandler &rArr; DacWriteContinue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacWriteContinue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>INTVCN0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>INTVCN1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = INTVCN1_IRQHandler &rArr; INTVCN1 &rArr; UiOutDataStart &rArr; DacWriteStart &rArr; DacWriteContinue
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>INTEMG0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>INTEMG1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>INTOVV0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>INTOVV1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>INTADAPDA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>INTADBPDA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>INTADAPDB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>INTADBPDB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>INTTB00_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INTTB00_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_interval_4kHz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>INTTB01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>INTTB10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>INTTB11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>INTTB40_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>INTTB41_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>INTTB50_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>INTTB51_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>INTPMD0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>INTPMD1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>INTCAP00_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>INTCAP01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>INTCAP10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>INTCAP11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>INTCAP40_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>INTCAP41_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>INTCAP50_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>INTCAP51_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>INT6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>INT7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>INTRX2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>INTTX2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>INTADACPA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>INTADBCPA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>INTADACPB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>INTADBCPB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>INTTB20_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>INTTB21_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>INTTB30_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>INTTB31_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>INTCAP20_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>INTCAP21_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>INTCAP30_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>INTCAP31_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>INTADASFT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>INTADBSFT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>INTADATMR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>INTADBTMR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>INT8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>INT9_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>INTA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>INTB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>INTENC00_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>INTENC01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>INTENC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>INTENC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>INTRX3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>INTTX3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>INTTB60_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>INTTB61_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>INTTB70_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>INTTB71_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>INTCAP60_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>INTCAP61_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>INTCAP70_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>INTCAP71_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>INTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>INTD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>INTE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>INTF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>INTVCT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>INTVCT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>INTSBI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>INTTB80_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>INTTB81_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>INTTB90_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>INTTB91_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>INTCAP80_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>INTCAP81_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>INTCAP90_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>INTCAP91_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>INTDMACATC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>INTDMACAERR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>INTENC11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>init_user_control</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_user_control &rArr; init_soft_adc &rArr; ADC_SetConstantTrg &rArr; proc_xSET
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Uikey
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_soft_adc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>user_control</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = user_control &rArr; user_setting &rArr; Get_Target_Speed &rArr; Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_setting
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[175]"></a>init_check_id_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usercon.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>check_id_error</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, usercon.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>UiOutDataStart</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UiOutDataStart &rArr; DacWriteStart &rArr; DacWriteContinue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacWriteStart
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTVCN1
</UL>

<P><STRONG><a name="[ef]"></a>ResetIdx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nguyen_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestUart
</UL>

<P><STRONG><a name="[ee]"></a>isReceiveEnoughData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nguyen_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestUart
</UL>

<P><STRONG><a name="[eb]"></a>SendData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nguyen_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestUart
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
</UL>

<P><STRONG><a name="[ed]"></a>TestUart</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nguyen_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveEnoughData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIdx
</UL>

<P><STRONG><a name="[d8]"></a>Uart0_initialization</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, nguyen_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart0_initialization &rArr; UART_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFIFOINTSel
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFIFOINTCtrl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFIFOFillLevel
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxFIFOClear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TRxAutoDisable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFIFOINTSel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFIFOINTCtrl
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFIFOFillLevel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFIFOClear
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFIFOByteSel
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableFuncReg
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>Uart0_Transmit_Interrupt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nguyen_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart0_Transmit_Interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTxData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetErrState
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTTX0_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>Uart0_Receive_Interrupt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nguyen_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart0_Receive_Interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetRxData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetErrState
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTRX0_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>Is_Uart_Ready_To_Send</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nguyen_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_setting
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Control_Ref_Model
</UL>

<P><STRONG><a name="[91]"></a>Send_Data_To_PC</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nguyen_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_Data_To_PC
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Uart_Ready_To_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_setting
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Control_Ref_Model
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Mode_Running_FSM
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestEncoder
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Velocity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Display_State
</UL>

<P><STRONG><a name="[102]"></a>TestCan</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tmpm475_can_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxReq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMbxMsg
</UL>

<P><STRONG><a name="[10b]"></a>CAN_Clock_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[105]"></a>CAN_PortInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_PortInit &rArr; GPIO_SetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableFuncReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullUp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutput
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOpenDrain
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[10a]"></a>nENCAN_Pin_Configuration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nENCAN_Pin_Configuration &rArr; GPIO_Init &rArr; GPIO_SetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[d9]"></a>CAN_Initialization</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN_Initialization &rArr; nENCAN_Pin_Configuration &rArr; GPIO_Init &rArr; GPIO_SetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxOrder
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMbxMsg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMbxDirection
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetINTMask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetGlobalState
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableMbx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigBitTiming
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nENCAN_Pin_Configuration
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PortInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Clock_Enable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>INTCANRX_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTCANRX_IRQHandler &rArr; CAN_GetMbxTRxState
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetMbxTRxState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearMbxTRxState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearINTFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>INTCANTX_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTCANTX_IRQHandler &rArr; CAN_GetMbxTRxState
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetMbxTRxState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearMbxTRxState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearINTFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>INTCANGB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearINTFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>INTADB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_can_int.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>Uart_Display_State</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Uart_Display_State &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Processing
</UL>

<P><STRONG><a name="[118]"></a>Command_Parsing</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Command_Parsing &rArr; Set_Target_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Target_Speed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Position_Mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Mode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Enable_Mode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Max_Speed_For_Position_Mode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Distance_For_Position_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Processing
</UL>

<P><STRONG><a name="[11f]"></a>Send_Command_Back</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Send_Command_Back &rArr; CAN_SetMbxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxReq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMbxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Processing
</UL>

<P><STRONG><a name="[121]"></a>Can_Update_Payload_Buffer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Processing
</UL>

<P><STRONG><a name="[d6]"></a>CAN_Data_Processing</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = CAN_Data_Processing &rArr; Uart_Display_State &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetMbxMsg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Update_Payload_Buffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Command_Back
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Parsing
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Display_State
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[d7]"></a>Encoder_Initializaion</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, nguyen_encoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Encoder_Initializaion &rArr; ENC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableFuncReg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInputEnableReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetSampleClk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetNoiseCancelTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetINTControl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetCounterReload
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>INTENC10_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nguyen_encoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTENC10_IRQHandler &rArr; GPIO_WriteDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteDataBit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>Get_Encoder_Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nguyen_encoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Mode_Running_FSM
</UL>

<P><STRONG><a name="[129]"></a>Get_Velocity</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, nguyen_encoder.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[12a]"></a>TestEncoder</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, nguyen_encoder.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[178]"></a>Motor_Action_Status_Bits_Initialization</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nguyen_motor_app.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>Set_Position_Mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Parsing
</UL>

<P><STRONG><a name="[11a]"></a>Set_Motor_Mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Parsing
</UL>

<P><STRONG><a name="[119]"></a>Set_Motor_Enable_Mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Mode_Running_FSM
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Parsing
</UL>

<P><STRONG><a name="[e9]"></a>Get_Motor_Direction</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_setting
</UL>

<P><STRONG><a name="[8b]"></a>Is_Motor_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_User_MotorControl
</UL>

<P><STRONG><a name="[e8]"></a>Get_Target_Speed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Get_Target_Speed &rArr; Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_FSM_Application
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_setting
</UL>

<P><STRONG><a name="[11e]"></a>Set_Target_Speed</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_Target_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Parsing
</UL>

<P><STRONG><a name="[11d]"></a>Set_Max_Speed_For_Position_Mode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Parsing
</UL>

<P><STRONG><a name="[11c]"></a>Set_Distance_For_Position_Mode</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_Distance_For_Position_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Parsing
</UL>

<P><STRONG><a name="[dc]"></a>ADC_SetClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tmpm475_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ADC_init
</UL>

<P><STRONG><a name="[dd]"></a>ADC_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_ADC_init
</UL>

<P><STRONG><a name="[179]"></a>ADC_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>ADC_Start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tmpm475_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_soft_adc
</UL>

<P><STRONG><a name="[17a]"></a>ADC_StopConstantTrg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>ADC_GetConvertState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>ADC_SetMonitor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>ADC_DisableMonitor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>ADC_GetConvertResult</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>ADC_SelectPMDTrgProgNum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>ADC_SetPMDTrgProgINT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>ADC_SetPMDTrg</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tmpm475_adc.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>ADC_SetTimerTrg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_xSET
</UL>

<P><STRONG><a name="[130]"></a>ADC_SetSWTrg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tmpm475_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_xSET
</UL>

<P><STRONG><a name="[e3]"></a>ADC_SetConstantTrg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tmpm475_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetConstantTrg &rArr; proc_xSET
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_xSET
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_soft_adc
</UL>

<P><STRONG><a name="[126]"></a>ENC_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
</UL>

<P><STRONG><a name="[182]"></a>ENC_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>ENC_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, tmpm475_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
</UL>

<P><STRONG><a name="[132]"></a>ENC_GetControlMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_StartPositionDetection
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_StopPositionDetection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SelectSampleMode
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetPhaseCountRate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetCounterMCMP
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetCounterMCMP
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetCounterValue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetCompareValue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetCompareValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetSWCapture
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetCounterReload
</UL>

<P><STRONG><a name="[131]"></a>ENC_SetSWCapture</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[183]"></a>ENC_ClearCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>ENC_GetENCFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>ENC_SetCounterReload</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tmpm475_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENC_SetCounterReload
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
</UL>

<P><STRONG><a name="[133]"></a>ENC_SetCompareValue</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[134]"></a>ENC_GetCompareValue</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[135]"></a>ENC_GetCounterValue</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[136]"></a>ENC_SetCounterMCMP</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[137]"></a>ENC_GetCounterMCMP</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[138]"></a>ENC_SetPhaseCountRate</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[125]"></a>ENC_SetNoiseCancelTime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
</UL>

<P><STRONG><a name="[185]"></a>ENC_GetNoiseCancelTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>ENC_SelectSampleMode</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[13b]"></a>ENC_GetSampleMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetPWMStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetPWMSampleMode
</UL>

<P><STRONG><a name="[13a]"></a>ENC_SetPWMSampleMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetSampleMode
</UL>

<P><STRONG><a name="[13d]"></a>ENC_GetPWMSampleMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetPWMStop
</UL>

<P><STRONG><a name="[13c]"></a>ENC_SetPWMStop</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetPWMSampleMode
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetSampleMode
</UL>

<P><STRONG><a name="[13e]"></a>ENC_StopPositionDetection</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[13f]"></a>ENC_StartPositionDetection</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, tmpm475_enc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetControlMode
</UL>

<P><STRONG><a name="[186]"></a>ENC_SetSampleDelay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>ENC_GetInputStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>ENC_GetInputPosition</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>ENC_SetSampleClk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
</UL>

<P><STRONG><a name="[127]"></a>ENC_SetINTControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tmpm475_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
</UL>

<P><STRONG><a name="[189]"></a>ENC_GetINTFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_enc.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>GPIO_ReadData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteDataBit
</UL>

<P><STRONG><a name="[128]"></a>GPIO_ReadDataBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTENC10_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>GPIO_WriteData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>GPIO_WriteDataBit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WriteDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_UART
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTENC10_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nENCAN_Pin_Configuration
</UL>

<P><STRONG><a name="[108]"></a>GPIO_SetOpenDrain</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PortInit
</UL>

<P><STRONG><a name="[141]"></a>GPIO_SetPullDown</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[109]"></a>GPIO_SetPullUp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PortInit
</UL>

<P><STRONG><a name="[106]"></a>GPIO_SetOutput</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PortInit
</UL>

<P><STRONG><a name="[107]"></a>GPIO_SetInput</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PortInit
</UL>

<P><STRONG><a name="[f2]"></a>GPIO_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init &rArr; GPIO_SetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullDown
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullUp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutput
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOpenDrain
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nENCAN_Pin_Configuration
</UL>

<P><STRONG><a name="[bd]"></a>GPIO_SetOutputEnableReg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_UART
</UL>

<P><STRONG><a name="[e6]"></a>GPIO_SetInputEnableReg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Uikey
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
</UL>

<P><STRONG><a name="[f3]"></a>GPIO_EnableFuncReg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Initializaion
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_PortInit
</UL>

<P><STRONG><a name="[18b]"></a>GPIO_DisableFuncReg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tmpm475_gpio.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>TMRB_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Timer_interval4kH
</UL>

<P><STRONG><a name="[18c]"></a>TMRB_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>TMRB_SetRunState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Timer_interval4kH
</UL>

<P><STRONG><a name="[ab]"></a>TMRB_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Timer_interval4kH
</UL>

<P><STRONG><a name="[18d]"></a>TMRB_SetCaptureTiming</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>TMRB_SetFlipFlop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>TMRB_GetINTFactor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>TMRB_SetINTMask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>TMRB_ChangeLeadingTiming</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>TMRB_ChangeTrailingTiming</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>TMRB_GetUpCntValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>TMRB_GetCaptureValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>TMRB_ExecuteSWCapture</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>TMRB_SetIdleMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>TMRB_SetSyncMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>TMRB_SetDoubleBuf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>TMRB_SetExtStartTrg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>TMRB_SetClkInCoreHalt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_tmrb.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>UART_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DefaultConfig
</UL>

<P><STRONG><a name="[19b]"></a>UART_SetInputClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>UART_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>UART_GetBufState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>UART_SWReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>UART_Init</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, tmpm475_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DefaultConfig
</UL>

<P><STRONG><a name="[101]"></a>UART_GetRxData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Receive_Interrupt
</UL>

<P><STRONG><a name="[ec]"></a>UART_SetTxData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Transmit_Interrupt
</UL>

<P><STRONG><a name="[bb]"></a>UART_DefaultConfig</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, tmpm475_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_UART
</UL>

<P><STRONG><a name="[100]"></a>UART_GetErrState</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Transmit_Interrupt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Receive_Interrupt
</UL>

<P><STRONG><a name="[19f]"></a>UART_SetWakeUpFunc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>UART_SetIdleMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>UART_FIFOConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[1a1]"></a>UART_SetFIFOTransferMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>UART_TRxAutoDisable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[f6]"></a>UART_RxFIFOINTCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[f5]"></a>UART_TxFIFOINTCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[f4]"></a>UART_RxFIFOByteSel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[f9]"></a>UART_RxFIFOFillLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[fa]"></a>UART_RxFIFOINTSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[fb]"></a>UART_RxFIFOClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[fc]"></a>UART_TxFIFOFillLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[fd]"></a>UART_TxFIFOINTSel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[fe]"></a>UART_TxFIFOClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[1a2]"></a>UART_TxBufferClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>UART_GetRxFIFOFillLevelStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>UART_GetRxFIFOOverRunStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>UART_GetTxFIFOFillLevelStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>UART_GetTxFIFOUnderRunStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>SIO_SetInputClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>SIO_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Dac
</UL>

<P><STRONG><a name="[1a8]"></a>SIO_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>SIO_GetRxData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>SIO_SetTxData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmpm475_uart.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>SIO_Init</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, tmpm475_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Dac
</UL>

<P><STRONG><a name="[143]"></a>WDT_SetDetectTime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_wdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[144]"></a>WDT_SetOverflowOutput</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tmpm475_wdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[b7]"></a>WDT_Init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, tmpm475_wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetOverflowOutput
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetDetectTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_WDT
</UL>

<P><STRONG><a name="[b9]"></a>WDT_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_wdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_WDT
</UL>

<P><STRONG><a name="[1ab]"></a>WDT_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_wdt.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>WDT_WriteClearCode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_WDT
</UL>

<P><STRONG><a name="[103]"></a>CAN_SetMbxMsg</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tmpm475_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_SetMbxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Command_Back
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCan
</UL>

<P><STRONG><a name="[120]"></a>CAN_GetMbxMsg</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, tmpm475_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_GetMbxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Data_Processing
</UL>

<P><STRONG><a name="[10d]"></a>CAN_SetMbxDirection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[112]"></a>CAN_EnableMbx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[1ac]"></a>CAN_DisableMbx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>CAN_SetTxReq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Command_Back
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCan
</UL>

<P><STRONG><a name="[114]"></a>CAN_GetMbxTRxState</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tmpm475_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_GetMbxTRxState
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCANTX_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCANRX_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>CAN_ClearMbxTRxState</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCANTX_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCANRX_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>CAN_SetTxLock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>CAN_SetRxMaskID</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>CAN_SetMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[1af]"></a>CAN_SetTestMode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>CAN_SetWakeUpOnBusActivity</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>CAN_SetTxOrder</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[1b1]"></a>CAN_ClearTimeStampCnt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>CAN_SWReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>CAN_ConfigBitTiming</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[1b3]"></a>CAN_SetTimeStampCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>CAN_GetErrCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>CAN_SetErrCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>CAN_GetGlobalState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[1b6]"></a>CAN_GetINTFlag</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tmpm475_can.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>CAN_ClearINTFlag</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCANGB_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCANTX_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCANRX_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>CAN_SetINTMask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmpm475_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[71]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_tmpm475.o(.text))

<P><STRONG><a name="[73]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_tmpm475.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[142]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, system_tmpm475.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, system_tmpm475.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tmpm475.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E_Sqrt
</UL>

<P><STRONG><a name="[145]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[90]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_setting
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Control_Ref_Model
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Mode_Running_FSM
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestEncoder
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Velocity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Display_State
</UL>

<P><STRONG><a name="[148]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[79]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[7b]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1b7]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_setting
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Control_Ref_Model
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Mode_Running_FSM
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestEncoder
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Velocity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Display_State
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1be]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[147]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[84]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1bf]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1c1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1c4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1c5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[95]"></a>C_command_limit_sub</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, c_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Steady_A
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Change_up
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Stage_Force
</UL>

<P><STRONG><a name="[9d]"></a>muljc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, calc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = muljc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Vdq
</UL>

<P><STRONG><a name="[9c]"></a>sadd32</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, calc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Vdq
</UL>

<P><STRONG><a name="[9a]"></a>E_Sqrt</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, calc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = E_Sqrt &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Vdq
</UL>

<P><STRONG><a name="[a1]"></a>DacLocalWriteInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dac_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DacLocalWriteInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Dac
</UL>

<P><STRONG><a name="[a3]"></a>__NVIC_GetPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dac_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLocalWriteInit
</UL>

<P><STRONG><a name="[a2]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dac_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Dac
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacLocalWriteInit
</UL>

<P><STRONG><a name="[ae]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, initial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VEen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Timer_interval4kH
</UL>

<P><STRONG><a name="[ad]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, initial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VEen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Timer_interval4kH
</UL>

<P><STRONG><a name="[ac]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, initial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VEen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Timer_interval4kH
</UL>

<P><STRONG><a name="[e1]"></a>init_led</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_led &rArr; GPIO_WriteDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteDataBit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutputEnableReg
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_control
</UL>

<P><STRONG><a name="[e2]"></a>init_soft_adc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_soft_adc &rArr; ADC_SetConstantTrg &rArr; proc_xSET
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetConstantTrg
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_control
</UL>

<P><STRONG><a name="[e5]"></a>init_Uikey</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_Uikey
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInputEnableReg
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_control
</UL>

<P><STRONG><a name="[ea]"></a>led_display</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_control
</UL>

<P><STRONG><a name="[e7]"></a>user_setting</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, usercon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = user_setting &rArr; Get_Target_Speed &rArr; Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Target_Speed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motor_Direction
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Uart_Ready_To_Send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_control
</UL>

<P><STRONG><a name="[ff]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nguyen_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_initialization
</UL>

<P><STRONG><a name="[113]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, tmpm475_can_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialization
</UL>

<P><STRONG><a name="[12b]"></a>Position_Mode_Running_FSM</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_To_PC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Encoder_Counter
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Enable_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_FSM_Application
</UL>

<P><STRONG><a name="[12d]"></a>Motor_FSM_Application</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nguyen_motor_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Motor_FSM_Application &rArr; Position_Mode_Running_FSM &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Mode_Running_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Target_Speed
</UL>

<P><STRONG><a name="[12f]"></a>proc_xSET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tmpm475_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proc_xSET
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetConstantTrg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSWTrg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetTimerTrg
</UL>

<P><STRONG><a name="[70]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
